# Exercício de programação - ACH2055 - Arquitetura de Computadores
# Docente:	Prof. Dr. Clodoaldo Aparecido
#
# Dicentes:	Alex Alves da Silva Bognar	927698
#		Álex Santana Fogaça		9360732
#		Guilherme Bortoto de Moraes	9360760
#		Juliana Mayumi Suzuki		9277691
#------------------------------------------------------------------------------------------

.data
array1: .space 8000			# Espaço alocado para o primeiro array
array2: .space 8000			# Espaço alocado para o segundo array
arrayResposta: .space 16000		# Espaço alocado para o terceiro array
bufferForWritting: .space 4		# Buffer utilizado para escrever arquivos no disco
bufferForReading: .ascii ""		# Buffer utilizado para ler a entrada do usuário
filename1: .asciiz "arquivo1.txt"	# Nome do arquivo de entrada 1
filename2: .asciiz "arquivo2.txt"	# Nome do arquivo de entrada 2
OutputFileName: .asciiz "resultado.txt"	# Nome do arquivo de saída
buffer: .asciiz ""			# Buffer utilizado para ler arquivos do disco
pulaLinha: .asciiz "\n"			# Utilizado para os prints

mensagem1: .asciiz "Nome do arquivo 1 (max 21 caracteres): "
mensagem2: .asciiz "Nome do arquivo 2 (max 21 caracteres): "
mensagem3: .asciiz "Nome do arquivo final (max 21 caracteres): "



#------------------------------------------------------------------------------------------
.text
la $s1, buffer		# Buffer utilizado para ler arquivos do disco 
la $s2, array1		# array1
addi $s3,$zero,0	# array1 size
la $s4, array2		# array2
addi $s5,$zero,0	# array2 size
la $s7, pulaLinha	# Utilizado para os prints
#------------------------------------------------------------------------------------------
addi $t1,$zero,0

# Nome do arquivo 1:
la $a0, mensagem1
li $v0, 4
syscall

li $v0,8			# 8 = Receber input
la $a0, bufferForReading	# Carregar N bytes no buffer
li $a1, 21			# N = 20
move $t0,$a0			# $t0
syscall

#------------------------------------------------------------------------------------------
# Replace10With0
# Para o programa reconhecer o nome do arquivo, deve ser trocado o elemento 10 ("\n") por
# 0 (NULL)
Replace10With0:
li $t0, 0
#loop counter
li $t1, 21
#loop end
limpar:
beq $t0,$t1, fimDaString
lb $t3, bufferForReading($t0)
bne $t3, 0x0a,proximo
sb $zero, bufferForReading($t0)
proximo:
addi $t0,$t0,1
j limpar
fimDaString:


LerPrimeiroArray:
#add $t3,$zero,$t0
li   $v0, 13        # system call for open file
la   $a0, bufferForReading
#add $a0,$zero,$t3   # input file name
li   $a1, 0         # flag for reading
li   $a2, 0         # mode is ignored
syscall             # open a file 
move $s0, $v0       # save the file descriptor 
addi $t2,$zero,0
j read

LerSegundoArray:

# Nome do arquivo 2:
la $a0, mensagem2
li $v0, 4
syscall

li $v0,8			# 8 = Receber input
la $a0, bufferForReading	# Carregar N bytes no buffer
li $a1, 21			# N = 20
move $t0,$a0			# $t0
syscall

#------------------------------------------------------------------------------------------
# Replace10With0
# Para o programa reconhecer o nome do arquivo, deve ser trocado o elemento 10 ("\n") por
# 0 (NULL)
Replace10With0.2:
li $t0, 0
#loop counter
li $t1, 21
#loop end
limpar2:
beq $t0,$t1, fimDaString2
lb $t3, bufferForReading($t0)
bne $t3, 0x0a,proximo2
sb $zero, bufferForReading($t0)
proximo2:
addi $t0,$t0,1
j limpar2
fimDaString2:


la $s1, buffer
addi $t1,$zero,0 # i

#la $t3, bufferForReading
li   $v0, 13       		# system call for open fileopen file
la   $a0, bufferForReading	# input file name
li   $a1, 0        		# flag for reading
li   $a2, 0       		# mode is ignored
syscall           		# open a file 
move $s0, $v0     		# save the file descriptor 
addi $t2,$zero,0

# -----------------------------------------------------------------------------------------
# read
# Essa função lê o próximo byte em arquivo e o retorna
# Lê: Byte em arquivo, codificado em ASCII
read:
addi $t7,$zero,0
# reading from file just opened
li   $v0, 14       # system call for reading from file
move $a0, $s0      # file descriptor 
la   $a1, buffer   # address of buffer from which to read
add $a2,$t2,1
#li   $a2, $t0	   # hardcoded buffer length
syscall            # read from file

add $t3,$t2,$s1
lb $t1, 0($t3)
j Translate

# -----------------------------------------------------------------------------------------
# Translate
# Essa função recebe o valor ASCII lido do arquivo através do registrador $t0
# e o traduz para um valor inteiro, guardando-o em $t4.
# Após a tradução, chama a função ArmazenarNaMemória, a qual escreve na memória o valor
# em $t4. Essa função também traduz "-", "\n" e " ".

Translate:
beq $t1,10,Enter		# "\n"	ASCII: 10
addi $t4,$zero,0
beq $t1,48,ArmazenarNaMemória	# "0"	ASCII: 48
addi $t4,$zero,1
beq $t1,49,ArmazenarNaMemória	# "1"	ASCII: 49
addi $t4,$zero,2
beq $t1,50,ArmazenarNaMemória	# "2"	ASCII: 50
addi $t4,$zero,3
beq $t1,51,ArmazenarNaMemória	# "3"	ASCII: 51
addi $t4,$zero,4
beq $t1,52,ArmazenarNaMemória	# "4"	ASCII: 52
addi $t4,$zero,5
beq $t1,53,ArmazenarNaMemória	# "5"	ASCII: 53
addi $t4,$zero,6
beq $t1,54,ArmazenarNaMemória	# "6"	ASCII: 54
addi $t4,$zero,7
beq $t1,55,ArmazenarNaMemória	# "7"	ASCII: 55
addi $t4,$zero,8
beq $t1,56,ArmazenarNaMemória	# "8"	ASCII: 56
addi $t4,$zero,9
beq $t1,57,ArmazenarNaMemória	# "9"	ASCII: 57

beq $t1,45,Minus		# "-"	ASCII: 45

beq $t1,32,Space		# " "	ASCII: 32
j Error

# -----------------------------------------------------------------------------------------
# Error
# Caso exista algum caractere desconhecido, terminar programa
Error:
j FinalDoPrograma

# -----------------------------------------------------------------------------------------
# Space
# Ignorar espaços
Space:
addi $t8,$zero,0	# 
addi $s3,$s3,1
j read

# -----------------------------------------------------------------------------------------
# Minus
# Caso o caracter lido for "-"
Minus:
addi $t8,$zero,0	# 
addi $t9,$zero,1	# settar a flag para negativos $t9
j read

# -----------------------------------------------------------------------------------------
# Enter
# Caso o caracter lido for "\n"
Enter:
bgtz $t8, EndOfFile	# Dois "\n" em seguida --> Arquivo finalizado
addi $s3,$s3,1		# Passar para próxima palavra (aka o número acabou)
addi $t8,$t8,1		# Flag para "O último caracter foi um "\n" "
bgtz $t9, Negative	# Preciso tornar o número negativo?
j read

# -----------------------------------------------------------------------------------------
# Negative
# Caso a flag $t9 seja verdadeira ao final de um número,
# torne esse número em memória negativo
Negative:
subi $t0,$s3,1
sll $t0,$t0,2
add $t0,$t0,$s2
lw $t1,($t0)		# $t1 = ultimo número em memória
addi $t3,$zero,-1
mult $t1,$t3
mflo $t1
sw $t1,0($t0)
addi $t9,$zero,0	# Resetar Flag "negativo"
j read

# -----------------------------------------------------------------------------------------
# ArmazenarNaMemória
# Essa função recebe o número a ser adicionado na memória através do registrador $t4
# e o adiciona na memória.
# Ex:	t1 = 123	memória[atual] = 123 * 10 + 4 = 1230 + 4 = 1234
#	t4 = 4

ArmazenarNaMemória:
addi $t8,$zero,0
sll $t0,$s3,2
add $t0,$t0,$s2
lw $t1,0($t0)		# $t1 = valor atual na memória

addi $t5,$zero,0
beqz $t1,skip		# Se o valor na memória for 0, só adicione o novo valor
addi $t6,$zero,10	
mult $t1,$t6		# valor na memória * 10
mflo $t5
skip:			# Se o valor na memória for 0, só adicione o novo valor
add $t1,$t5,$t4
sw $t1,0($t0)		# Gravar $t1 na memória
j read


# -----------------------------------------------------------------------------------------
# EndOfFile
# Essa função é chamada quando o arquivo é visto como finalizado ("\n\n")

EndOfFile:
add $a0,$zero,$s0
li $v0, 16		# Fechar arquivo
syscall
    
addi $t1,$zero,0	# i = 0
addi $t2,$zero,0	# place holder
subi $s3,$s3,1		# Devido a forma como o programa define o fim do arquivo,
			# é necessário remover 1 do total de elementos no arquivo.

printArray:		# Mostrar todo o array
sll $t2,$t1,2
add $t2,$t2,$s2
lw $t0, 0($t2)		# $t0 = array[i]
#jal printValor		# print(t0)

bge $t1,$s3, FimPrintArray	# if(i >= array.length) FimPrintArray
addi $t1,$t1,1		# i++
j printArray

FimPrintArray:
li $v0,4		# print "\n"
move $a0,$s7
syscall

bgtz $s5, TrocaDeVolta		# Caso o programa já tenha lido o segundo arquivo,
				# o tamanho do array secundário (array1) vai ser
				# maior do que 0. Nesse caso, destroque os arrays.
				# Se não, inverta os arrays e leia o segundo arquivo.

# -----------------------------------------------------------------------------------------
# Swap
# Essa parte do código troca os arrays 1 e 2 de lugar, exibindo a configuração seguinte:
# array1		$s2	-->	array2			$s2
# tam.array1		$s3	-->	tam.array2		$s3
# array2		$s4	-->	array1			$s4
# tam.array2		$s5	-->	tam.array1		$s5
Swap:
add $t0,$zero,$s2	# Guarda $s2
add $t1,$zero,$s3	# Guarda $s3

add $s2,$zero,$s4	# $s2 = array2
add $s3,$zero,$s5	# $s3 = tam.array2

add $s4,$zero,$t0	# $s4 = array1
add $s5,$zero,$t1	# $s5 = tam.array1
j LerSegundoArray


# -----------------------------------------------------------------------------------------
# TrocaDeVolta:
# Essa função retoma a posição original dos arrays, exibindo a configuração seguinte:
# array2		$s2	-->	array1			$s2
# tam.array2		$s3	-->	tam.array1		$s3
# array1		$s4	-->	array2			$s4
# tam.array1		$s5	-->	tam.array2		$s5

TrocaDeVolta:
add $t0,$zero,$s2	# Guarda $s2
add $t1,$zero,$s3	# Guarda $s3

add $s2,$zero,$s4	# $s2 = array1
add $s3,$zero,$s5	# $s3 = tam.array1

add $s4,$zero,$t0	# $s4 = array2
add $s5,$zero,$t1	# $s5 = tam.array2
j FinalDaPrimeiraParte

# -----------------------------------------------------------------------------------------
# printValor:
# Essa função recebe um valor em $t0 e o exibe no terminal
printValor:
li $v0,1	# print array[i]
move $a0,$t0
syscall

li $v0,4	# print " "
move $a0,$s7
syscall
jr $ra


FinalDaPrimeiraParte:


# -----------------------------------------------------------------------------------------
# Final da primeira parte do programa:
# Ler os dois arquivos e armazena-los em memória

# -----------------------------------------------------------------------------------------
# Resentando e organizando tudo

addi $v0,$zero,0
addi $v1,$zero,0

addi $a0,$zero,0
addi $a1,$zero,0
addi $a2,$zero,0
addi $a3,$zero,0

addi $t0,$zero,0
addi $t1,$zero,0
addi $t2,$zero,0
addi $t3,$zero,0
addi $t4,$zero,0
addi $t5,$zero,0
addi $t6,$zero,0
addi $t7,$zero,0
addi $t8,$zero,0
addi $t9,$zero,0

add $s0,$zero,$s2
add $s1,$zero,$s3
add $s2,$zero,$s4
add $s3,$zero,$s5
addi $s4,$zero,0
addi $s5,$zero,0
addi $s6,$zero,0
addi $s7,$zero,0


# PARTE 2
# Pegar esses dois arquivos armazenados e armazena-los em um terceiro array,
# ordenando-os no processo e retirando repetições
# -----------------------------------------------------------------------------------------


# array1[]		$s0
# array1.length - 1	$s1
# array2[]		$s2
# array2.length - 1	$s3
# bufferForWritting	$s4
# \n			$s5
# resposta[]		$s6
# resposta.length - 1 	$s7

la $s4, bufferForWritting
la $s5, pulaLinha
la $s6, arrayResposta
addi $s7,$zero,-1
#----------------------------------------------------------------------
addi $t0,$s1,1		# t0 = s1 + 1 --> array.length  - 1 + 1 = array.length
addi $t1,$s3,1		# t1 = s3 + 1 --> array2.length - 1 + 1 = array2.length

add $a0,$zero,$t0	# int *tam1
add $a1,$zero,$s0	# int *vetor1
add $a2,$zero,$t1	# int *tam2
add $a3,$zero,$s2	# int *vetor2
# Chama a função "concatena"		(a função concatena)
jal concatena

# Armazena os valores retornados
add $s6,$zero,$v0	# $s6 = array resposta
add $s7,$zero,$v1	# $s7 = tamanho do array resposta - 1

#------------------------------------------------------------------------------------------
# AbrirArquivo
# Essa função faz a chamada ao sistema para abrir o arquivo final (resultado).
# O descritor do arquivo (File descriptor) é guardado em $t9

# Nome do arquivo resposta:
la $a0, mensagem3
li $v0, 4
syscall

li $v0,8			# 8 = Receber input
la $a0, bufferForReading	# Carregar N bytes no buffer
li $a1, 21			# N = 20
move $t0,$a0			# $t0
syscall

#------------------------------------------------------------------------------------------
# Replace10With0
# Para o programa reconhecer o nome do arquivo, deve ser trocado o elemento 10 ("\n") por
# 0 (NULL)
Replace10With0.3:
li $t0, 0
#loop counter
li $t1, 21
#loop end
limpar3:
beq $t0,$t1, fimDaString3
lb $t3, bufferForReading($t0)
bne $t3, 0x0a,proximo3
sb $zero, bufferForReading($t0)
proximo3:
addi $t0,$t0,1
j limpar3
fimDaString3:

AbrirArquivo:
li $v0, 13
la $a0, bufferForReading
li $a1, 1
li $a2, 0
syscall  # File descriptor gets returned in $v0
add $t9,$zero,$v0


#------------------------------------------------------------------------------------------
# printArrayFinal
# Essa parte do código é responsável por percorrer todos os valores em memória,
# mostrando-os no terminal através da função printValor2 e armazenando-os em disco, através
# da função NumberToASCII.
 
addi $t1,$zero,0	# i = 0
addi $t2,$zero,0	# place holder
printArrayFinal:
sll $t2,$t1,2
add $t2,$t2,$s6
lw $t0, 0($t2)		# $t0 = arrayResposta[i]

add $t7,$zero,$t0	# salvar $t0 em $t7 
add $t8,$zero,$t1	# salvar $t1 em $t8
jal NumberToASCII
add $t0,$zero,$t7	# retomar o valor de $t0 salvo em $t7
add $t1,$zero,$t8	# retomar o valor de $t0 salvo em $t8

add $t7,$zero,$s4
addi $t6,$zero,10
sw $t6,0($t7)		# Buffer = "\n" em ASCII

#------------------------------------------------------------------------------------------
# EscreverEnter
# Essa parte do código escreve "\n" no arquivo. É utilizado ao fim de cada palavra escrita
# em disco.
EscreverEnter:
    move $a0, $t9  # Syscall 15 requieres file descriptor in $a0
    li $v0, 15
    add $a1,$zero,$t7
    la $a2, 1
    syscall

#jal printValor2		# Escrever o número no terminal

bge $t1,$s7, FimPrintArrayFinal	# if(i >= array.length) FimPrintArrayFinal
addi $t1,$t1,1		# i++
j printArrayFinal

#------------------------------------------------------------------------------------------
# FimPrintArrayFinal
# Printar no terminal um último "\n". Finalizar programa.
FimPrintArrayFinal:
li $v0,4	# print "\n"
move $a0,$s5
syscall
j FinalDoPrograma

#------------------------------------------------------------------------------------------
# NumberToASCII
# Essa função recebe um número em $t0 e escreve em disco sua representação em ASCII
# Ex:				"-" = 45
#	$t0 = -123	-->	"1" = 49	--> escrever em disco "45495051"
#				"2" = 50
#				"3" = 51

NumberToASCII:
add $t3,$zero,$t0
addi $t1,$zero,0	# i = 0
addi $t2,$zero,10
addi $t4,$zero,1

bltz $t0, NTANegativo		# Se $t0 for negativo, escreva "-" no arquivo
j loop

NTANegativo:			# Se $t0 for negativo, escreva "-" no arquivo
add $t2,$zero,$s4
addi $t6,$zero,45
sw $t6,0($t2)			# Buffer = "-"

move $a0, $t9  # Syscall 15 requieres file descriptor in $a0
li $v0, 15
add $a1,$zero,$t2
la $a2, 1
syscall
addi $t2,$zero,10

addi $t4,$zero,-1
mult $t4,$t0		# $t0 = $t0 * -1 = -$t0 = -(-N) = N
mflo $t0
j NumberToASCII		# faça o processo denovo, mas agora para $t0 positivo

#------------------------------------------------------------------------------------------
# loop
# Divida o valor original por 10 até que o quociente seja 0.
# Cada vez que o valor original for dividido por 10, o resto será igual ao último caracter
# desse número. Adicionar esse caracter em ASCII na pilha $sp.
loop:
addi $t1,$t1,1		# i++
div $t3,$t2
mfhi $t3
addi $t3,$t3,48
subi $sp,$sp,4
sw $t3, 0($sp)
mflo $t3
bgtz $t3, loop

#------------------------------------------------------------------------------------------
# loop2
# Desempilhar $sp e adicionar cada valor no arquivo descrito em $t9 (arquivo de saída)
loop2:
subi $t1,$t1,1		# i--
lw $t6, 0($sp)		# $t6 = desempilha($sp)
addi $sp,$sp,4
add $t3,$zero,$s4
sw $t6,0($t3)		# bufferForWritting = $t6

move $a0, $t9  # Syscall 15 requieres file descriptor in $a0
li $v0, 15
add $a1,$zero,$t3
la $a2, 1
syscall

bgtz $t1, loop2		# if(i > 0) loop2

#------------------------------------------------------------------------------------------
# EndNumberToASCII
# Resetar os valores em $t0 a $t4, retornar.
EndNumberToASCII:
addi $t0,$zero,0
addi $t1,$zero,0
addi $t2,$zero,0
addi $t3,$zero,0
addi $t4,$zero,0
jr $ra

#------------------------------------------------------------------------------------------
# concatena
# Essa função recebe como argumentos:		E retorna:
# $a0	tamanho do array 1			$v0	Ponteiro para o array resposta
# $a1	ponteiro para o array 1			$v1	Tamanho do array resposta
# $a2	tamanho do array 2
# $a3	ponteiro para o array 2

concatena:
# Salvar o contexto de $t0 a $t7 na pilha $sp
subi $sp,$sp,32		# Aumenta a pilha em 7 palavras
sw $t0,28($sp)		# Salva o valor atual de t0
sw $t1,24($sp)		# Salva o valor atual de t1
sw $t2,20($sp)		# Salva o valor atual de t2
sw $t3,16($sp)		# Salva o valor atual de t3
sw $t4,12($sp)		# Salva o valor atual de t4
sw $t5,8($sp)		# Salva o valor atual de t5
sw $t6,4($sp)		# Salva o valor atual de t6
sw $t7,0($sp)		# Salva o valor atual de t7

addi $t0,$zero,0	# i --> posição no array[]
addi $t1,$zero,0	# j --> posição no array2[]
addi $t2,$zero,0	# tmp (place holder)
addi $t3,$zero,0	# array1[i]
addi $t4,$zero,0	# array2[j]
addi $t5,$zero,-1	# tamanho array resposta
la $t6, arrayResposta	# array resposta

check:
slt $t2,$t0,$a0			# if(i < array1.length) continue checando
beqz $t2, ArrayUmVazio		# ou seja, enquanto o array1 tiver elementos

slt $t2,$t1,$a2			# if(j < array2.length) continue checando
beqz $t2, ArrayDoisVazio	# ou seja, enquanto o array2 tiver elementos

sll $t2,$t0,2
add $t2,$t2,$a1
lw $t3,0($t2)		# t3 = array[i]
sll $t2,$t1,2
add $t2,$t2,$a3
lw $t4,0($t2)		# t4 = array2[j]


seq $t2,$t3,$t4		# Se array[i] == array2[j]
beq $t2,1,Equal
slt $t2,$t3,$t4		# Se array[i] < array2[j]
beq $t2,1,Less
j Greater		# Se array[i] > array2[j]

# Caso 1 --> elementos iguais
Equal:
sll $t2,$t5,2
add $t2,$t2,$t6
lw $t7,0($t2)		# t7 = resposta[-1]
seq $t2,$t7,$t3
bnez $t2, NaoAdicionar	# Caso o elemento já exista, não adiciona-lo denovo

addi $t5,$t5,1
sll $t2,$t5,2
add $t2,$t2,$t6
sw $t3,0($t2)

NaoAdicionar:		# Caso o elemento já exista, não adiciona-lo denovo
addi $t0,$t0,1		# i++
addi $t1,$t1,1		# j++
j check

# Caso 2 --> array1[i] < array2[j]
Less:
sll $t2,$t5,2
add $t2,$t2,$t6
lw $t7,0($t2)		# t7 = resposta[-1]
seq $t2,$t7,$t3
bnez $t2, NaoAdicionarI	# Caso o elemento já exista, não adiciona-lo denovo

add $t5,$t5,1
sll $t2,$t5,2
add $t2,$t2,$t6
sw $t3,0($t2)

NaoAdicionarI:		# Caso o elemento já exista, não adiciona-lo denovo
addi $t0,$t0,1		# i++
j check

# Caso 3 --> array1[i] > array2[j]
Greater:
sll $t2,$t5,2
add $t2,$t2,$t6
lw $t7,0($t2)		# t7 = resposta[-1]
seq $t2,$t7,$t4
bnez $t2, NaoAdicionarJ	# Caso o elemento já exista, não adiciona-lo denovo

add $t5,$t5,1
sll $t2,$t5,2
add $t2,$t2,$t6
sw $t4,0($t2)

NaoAdicionarJ:		# Caso o elemento já exista, não adiciona-lo denovo
addi $t1,$t1,1		# j++
j check

ArrayUmVazio:
slt $t2,$t1,$a2
beqz $t2, Fim		# if(j >= array2.length) Fim

sll $t2,$t5,2
add $t2,$t2,$t6
lw $t7,0($t2)		# t7 = resposta[-1]

sll $t2,$t1,2
add $t2,$t2,$a3
lw $t4,0($t2)		# t4 = array2[j]

beq $t7,$t4, NaoAdicionarJ2	# Caso o elemento já exista, não adiciona-lo denovo

add $t5,$t5,1
sll $t2,$t5,2
add $t2,$t2,$t6
sw $t4,0($t2)

NaoAdicionarJ2:			# Caso o elemento já exista, não adiciona-lo denovo
addi $t1,$t1,1 			# j++
j ArrayUmVazio


ArrayDoisVazio:
slt $t2,$t0,$a0
beqz $t2, Fim		# if(i >= array.length) Fim

sll $t2,$t5,2
add $t2,$t2,$t6
lw $t7,0($t2)		# t7 = resposta[-1]

sll $t2,$t0,2
add $t2,$t2,$a1
lw $t3,0($t2)		# t3 = array[i]

beq $t7,$t3, NaoAdicionarI2	# Caso o elemento já exista, não adiciona-lo denovo

add $t5,$t5,1
sll $t2,$t5,2
add $t2,$t2,$t6
sw $t3,0($t2)

NaoAdicionarI2:			# Caso o elemento já exista, não adiciona-lo denovo
addi $t0,$t0,1			# i++
j ArrayDoisVazio

Fim:
add $v0,$zero,$t6 # retorno 1 - Array resposta
add $v1,$zero,$t5 # retorno 2 - Tamanho do array resposta

# Retomar contexto armazenado em $sp
lw $t7,0($sp)		# Repoe o valor original de t7
lw $t6,4($sp)		# Repoe o valor original de t6
lw $t5,8($sp)		# Repoe o valor original de t5
lw $t4,12($sp)		# Repoe o valor original de t4
lw $t3,16($sp)		# Repoe o valor original de t3
lw $t2,20($sp)		# Repoe o valor original de t2
lw $t1,24($sp)		# Repoe o valor original de t1
lw $t0,28($sp)		# Repoe o valor original de t0
addi $sp,$sp,32		# Diminui a pilha em 8 palavras
jr $ra

#------------------------------------------------------------------------------------------
# printValor2
# Essa função recebe um valor em $t0 e o exibe no terminal
# (O que diferencia printValor e printValor2 é o regristrador que representa "\n")
printValor2:
li $v0,1	# print array[i]
move $a0,$t0
syscall

li $v0,4	# print " "
move $a0,$s5
syscall
jr $ra


#------------------------------------------------------------------------------------------
# FinalDoPrograma
# Limpa todos os registradores, deixando apenas os seguintes registradores:
# $s0		Ponteiro para o array 1
# $s1		Tamanho do array1 - 1
# $s2		Ponteiro para o array 2
# $s3		Tamanho do array2 - 1
# $s4		Ponteiro para o array resposta
# $s5		Tamanho do array resposta - 1

FinalDoPrograma:

add $a0,$zero,$t9
li $v0, 16		# Fechar arquivo de saída
syscall

addi $v0,$zero,0
addi $v1,$zero,0

addi $a0,$zero,0
addi $a1,$zero,0
addi $a2,$zero,0
addi $a3,$zero,0

addi $t0,$zero,0
addi $t1,$zero,0
addi $t2,$zero,0
addi $t3,$zero,0
addi $t4,$zero,0
addi $t5,$zero,0
addi $t6,$zero,0
addi $t7,$zero,0
addi $t8,$zero,0
addi $t9,$zero,0

add $s4,$zero,$s6
add $s5,$zero,$s7
addi $s6,$zero,0
addi $s7,$zero,0
