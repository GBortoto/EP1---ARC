# Teste de I/O

.data
array: .space 100
filename: .ascii "teste.txt"
buffer: .asciiz ""
pulaLinha: .asciiz "\n"
space: .asciiz " "

.text

la $s1, buffer
addi $t1,$zero,0 #i
la $s2, array
addi $s3,$zero,0 #array size
la $s4, space
la $s5, pulaLinha


# fill(array)
addi $t1,$zero,0
addi $t0,$zero,0 # i
Fill:
bge $t0,10, EndFill # while i < 10
sll $t2,$t0,2
add $t2,$t2,$s2
sw $t1,0($t2)	# array[i] = 0
addi $t0,$t0,1 # i++
j Fill
EndFill:




li   $v0, 13       # system call for open file
la   $a0, filename # input file name
li   $a1, 0        # flag for reading
li   $a2, 0        # mode is ignored
syscall            # open a file 
move $s0, $v0      # save the file descriptor 




addi $t2,$zero,0
read:
# reading from file just opened
li   $v0, 14       # system call for reading from file
move $a0, $s0      # file descriptor 
la   $a1, buffer   # address of buffer from which to read
add $a2,$t2,1
#addi $a2,$a2,4
#li   $a2, $t0	   # hardcoded buffer length
syscall            # read from file

add $t3,$t2,$s1
#addi $t3,
lb $t1, 0($t3)

beq $t1,16,EndOfFile1
beq $t1,10,EndOfFile1
j Translate






EndOfFile1:
addi $t1,$zero,0
addi $t2,$zero,0
printArray:
sll $t2,$t1,2
add $t2,$t2,$s2
lw $t0, 0($t2)
jal printValor
slt $t4,$t1,$s3		# if(i >= array.length) FimPrint
beqz $t4, FimPrintArray
addi $t1,$t1,1
j printArray

FimPrintArray:
li $v0,4	# print "\n"
move $a0,$s5
syscall
j END





Translate:
beq $t1,48,Zero
beq $t1,49,Um
beq $t1,50,Dois
beq $t1,51,Tres
beq $t1,52,Quatro
beq $t1,53,Cinco
beq $t1,54,Seis
beq $t1,55,Sete
beq $t1,56,Oito
beq $t1,57,Nove
beq $t1,32,Space
j Error

Zero:
sll $t0,$s3,2
add $t0,$t0,$s2
lw $t1,0($t0)

add $a0,$zero,0
add $a1,$zero,$t1
jal LidarComDecimal
add $t1,$zero,$v0
sw $t1,0($t0)
j read

Um:
sll $t0,$s3,2
add $t0,$t0,$s2
lw $t1,0($t0)

add $a0,$zero,1
add $a1,$zero,$t1
jal LidarComDecimal
add $t1,$zero,$v0
sw $t1,0($t0)
j read

Dois:
sll $t0,$s3,2
add $t0,$t0,$s2
lw $t1,0($t0)

add $a0,$zero,2
add $a1,$zero,$t1
jal LidarComDecimal
add $t1,$zero,$v0
sw $t1,0($t0)
j read

Tres:
sll $t0,$s3,2
add $t0,$t0,$s2
lw $t1,0($t0)

add $a0,$zero,3
add $a1,$zero,$t1
jal LidarComDecimal
add $t1,$zero,$v0
sw $t1,0($t0)
j read

Quatro:
sll $t0,$s3,2
add $t0,$t0,$s2
lw $t1,0($t0)

add $a0,$zero,4
add $a1,$zero,$t1
jal LidarComDecimal
add $t1,$zero,$v0
sw $t1,0($t0)
j read

Cinco:
sll $t0,$s3,2
add $t0,$t0,$s2
lw $t1,0($t0)

add $a0,$zero,5
add $a1,$zero,$t1
jal LidarComDecimal
add $t1,$zero,$v0
sw $t1,0($t0)
j read

Seis:
sll $t0,$s3,2
add $t0,$t0,$s2
lw $t1,0($t0)

add $a0,$zero,6
add $a1,$zero,$t1
jal LidarComDecimal
add $t1,$zero,$v0
sw $t1,0($t0)
j read

Sete:
sll $t0,$s3,2
add $t0,$t0,$s2
lw $t1,0($t0)

add $a0,$zero,7
add $a1,$zero,$t1
jal LidarComDecimal
add $t1,$zero,$v0
sw $t1,0($t0)
j read

Oito:
sll $t0,$s3,2
add $t0,$t0,$s2
lw $t1,0($t0)

add $a0,$zero,8
add $a1,$zero,$t1
jal LidarComDecimal
add $t1,$zero,$v0
sw $t1,0($t0)
j read

Nove:
sll $t0,$s3,2
add $t0,$t0,$s2
lw $t1,0($t0)

add $a0,$zero,9
add $a1,$zero,$t1
jal LidarComDecimal
add $t1,$zero,$v0
sw $t1,0($t0)
j read


Space:
addi $s3,$s3,1
j read


Error:

j END

printValor:
li $v0,1	# print array[i]
move $a0,$t0
syscall

li $v0,4	# print " "
move $a0,$s4
syscall
jr $ra

j END

LidarComDecimal:

addi $t5,$zero,0 # i = 0
addi $t6,$zero,10 # 10
loop:
addi $t5,$t5,1 # i++
div $a1,$t6	# nÃºmero/10
mflo $t1	# quociente
bgt $t1,0,loop	# se quociente > 0


addi $t1,$zero,10
addi $t6,$zero,0
Por10:
mult $a1,$t1
mflo $a1
addi $t6,$t6,1
blt $t6,$t5,Por10
add $v0,$a1,$a0
jr $ra

j END


END: