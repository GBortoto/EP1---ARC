# array[]		$s0
# array.length - 1	$s1
# array2[]		$s2
# array2.length - 1	$s3
# space			$s4
# \n			$s5

# resposta[]		$s6
# resposta.length - 1 	$s7

.data		
	array1: .word 2 3 4 6 7 8 9 12 15
	array2: .word 1 3 5 6 7 8
	resposta: .space 100
	space: .asciiz " "
	pulaLinha: .asciiz "\n"
	#original: .asciiz "Array original:\t"
	#sort: .asciiz "Array sorted:\t"
	
.text
la $s0, array1
addi $s1,$zero,8 # array.length - 1
la $s2, array2
addi $s3,$zero,5
la $s4, space
la $s5, pulaLinha
la $s6, resposta
addi $s7,$zero,-1
#--------------------------------------------------------------------------
addi $t1,$zero,0
addi $t2,$zero,0
printArray:
sll $t2,$t1,2
add $t2,$t2,$s0
lw $t0, 0($t2)
jal printValor
slt $t4,$t1,$s1		# if(i >= array.length) FimPrint
beqz $t4, FimPrintArray
addi $t1,$t1,1
j printArray

FimPrintArray:
li $v0,4	# print "\n"
move $a0,$s5
syscall


addi $t1,$zero,0
addi $t2,$zero,0
printArray2:
sll $t2,$t1,2
add $t2,$t2,$s2
lw $t0, 0($t2)
jal printValor
slt $t4,$t1,$s3		# if(i >= array.length) FimPrint
beqz $t4, FimPrintArray2
addi $t1,$t1,1
j printArray2

FimPrintArray2:
li $v0,4	# print "\n"
move $a0,$s5
syscall


# array[]		$s0
# array.length - 1	$s1
# array2[]		$s2
# array2.length - 1	$s3
# space			$s4
# \n			$s5
# resposta[]		$s6
# resposta.length - 1 	$s7

addi $t0,$s1,1 # t0 = s1 + 1 --> array.length  - 1 + 1 = array.length
addi $t1,$s3,1 # t1 = s3 + 1 --> array2.length - 1 + 1 = array2.length

add $a0,$zero,$t0 # int *tam1
add $a1,$zero,$s0 # int *vetor1
add $a2,$zero,$t1 # int *tam2
add $a3,$zero,$s2 # int *vetor2
# Chama a função "concatena"
jal concatena

add $s6,$zero,$v0
add $s7,$zero,$v1

addi $t1,$zero,0
addi $t2,$zero,0
printArrayFinal:
sll $t2,$t1,2
add $t2,$t2,$s6
lw $t0, 0($t2)
jal printValor
slt $t4,$t1,$s7		# if(i >= array.length) FimPrint
beqz $t4, FimPrintArrayFinal
addi $t1,$t1,1
j printArrayFinal

FimPrintArrayFinal:
li $v0,4	# print "\n"
move $a0,$s5
syscall


j END

printValor:
li $v0,1	# print array[i]
move $a0,$t0
syscall

li $v0,4	# print " "
move $a0,$s2
syscall
jr $ra

j END

concatena:
subi $sp,$sp,32		# Aumenta a pilha em 7 palavras
sw $t0,28($sp)		# Salva o valor atual de t0
sw $t1,24($sp)		# Salva o valor atual de t1
sw $t2,20($sp)		# Salva o valor atual de t2
sw $t3,16($sp)		# Salva o valor atual de t3
sw $t4,12($sp)		# Salva o valor atual de t4
sw $t5,8($sp)		# Salva o valor atual de t5
sw $t6,4($sp)		# Salva o valor atual de t6
sw $t7,0($sp)		# Salva o valor atual de t7

# Recebe
# a0 = s1 = tamanho do array 1
# a1 = s0 = array 1
# a2 = s3 = tamanho do array 2
# a3 = s2 = array 2

addi $t0,$zero,0 # i --> posição no array[]
addi $t1,$zero,0 # j --> posição no array2[]
addi $t2,$zero,0 # tmp (place holder)
addi $t3,$zero,0 # array[i]
addi $t4,$zero,0 # array2[j]
addi $t5,$zero,-1 # tamanho array resposta
la $t6, resposta # array resposta

check:
slt $t2,$t0,$a0			# if(i < array.length) continue checando
beqz $t2, ArrayUmVazio
slt $t2,$t1,$a2
beqz $t2, ArrayDoisVazio	# if(j < array2.length) continue checando

sll $t2,$t0,2
add $t2,$t2,$a1
lw $t3,0($t2)		# t3 = array[i]
sll $t2,$t1,2
add $t2,$t2,$a3
lw $t4,0($t2)		# t4 = array2[j]


seq $t2,$t3,$t4		# Se array[i] == array2[j]
beq $t2,1,Equal
slt $t2,$t3,$t4		# Se array[i] < array2[j]
beq $t2,1,Less
j Greater		# Se array[i] > array2[j]

Equal:
sll $t2,$t5,2
add $t2,$t2,$t6
lw $t7,0($t2)		# t7 = resposta[-1]
seq $t2,$t7,$t3
bnez $t2, NaoAdicionar

addi $t5,$t5,1
sll $t2,$t5,2
add $t2,$t2,$t6
sw $t3,0($t2)

NaoAdicionar:
addi $t0,$t0,1 # i++
addi $t1,$t1,1 # j++
j check

Less:
sll $t2,$t5,2
add $t2,$t2,$t6
lw $t7,0($t2)		# t7 = resposta[-1]
seq $t2,$t7,$t3
bnez $t2, NaoAdicionarI

add $t5,$t5,1
sll $t2,$t5,2
add $t2,$t2,$t6
sw $t3,0($t2)

NaoAdicionarI:
addi $t0,$t0,1 # i++
j check

Greater:
sll $t2,$t5,2
add $t2,$t2,$t6
lw $t7,0($t2)		# t7 = resposta[-1]
seq $t2,$t7,$t4
bnez $t2, NaoAdicionarJ

add $t5,$t5,1
sll $t2,$t5,2
add $t2,$t2,$t6
sw $t4,0($t2)

NaoAdicionarJ:
addi $t1,$t1,1 # j++
j check

ArrayUmVazio:
slt $t2,$t1,$a2
beqz $t2, Fim	# if(j >= array2.length) Fim

sll $t2,$t1,2
add $t2,$t2,$a3
lw $t4,0($t2)		# t4 = array2[j]

add $t5,$t5,1
sll $t2,$t5,2
add $t2,$t2,$t6
sw $t4,0($t2)
addi $t1,$t1,1 # j++
j ArrayUmVazio


ArrayDoisVazio:
slt $t2,$t0,$a0
beqz $t2, Fim	# if(i >= array.length) Fim

sll $t2,$t0,2
add $t2,$t2,$a1
lw $t3,0($t2)		# t3 = array[i]

add $t5,$t5,1
sll $t2,$t5,2
add $t2,$t2,$t6
sw $t3,0($t2)
addi $t0,$t0,1 # i++
j ArrayDoisVazio

IgualAnterior:



Fim:
add $v0,$zero,$t6 # retorno 1 - Array resposta
add $v1,$zero,$t5 # retorno 2 - Tamanho do array resposta

lw $t7,0($sp)		# Repoe o valor original de t7
lw $t6,4($sp)		# Repoe o valor original de t6
lw $t5,8($sp)		# Repoe o valor original de t5
lw $t4,12($sp)		# Repoe o valor original de t4
lw $t3,16($sp)		# Repoe o valor original de t3
lw $t2,20($sp)		# Repoe o valor original de t2
lw $t1,24($sp)		# Repoe o valor original de t1
lw $t0,28($sp)		# Repoe o valor original de t0
addi $sp,$sp,32		# Diminui a pilha em 8 palavras
jr $ra

END:
